generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookmarks {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  folder_id   Int?
  page_id     Int?
  link        String?   @db.VarChar(255)
  title       String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  description String?   @db.Text
  is_pinned   Boolean?  @default(false)
  is_archived Boolean?  @default(false)
  tags        String?   @default("[]") @db.LongText
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  folders     folders?  @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pages       pages?    @relation(fields: [page_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([folder_id], map: "bookmarks_folder_id_fkey")
  @@index([page_id], map: "bookmarks_page_id_fkey")
  @@index([user_id], map: "bookmarks_user_id_fkey")
}

model folders {
  id         Int         @id @default(autoincrement())
  name       String?     @db.VarChar(255)
  code       String?     @db.VarChar(255)
  user_id    Int?
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime?   @db.Timestamp(0)
  bookmarks  bookmarks[]
  users      users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pages      pages[]

  @@index([user_id], map: "folders_user_id_fkey")
}

model pages {
  id          Int         @id @default(autoincrement())
  user_id     Int?
  folder_id   Int?
  title       String?     @db.VarChar(255)
  description String?     @db.LongText
  icon        String?     @db.VarChar(255)
  banner      String?     @db.VarChar(255)
  code        String?     @db.VarChar(255)
  is_public   Boolean?
  created_at  DateTime    @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  bookmarks   bookmarks[]
  folders     folders?    @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([folder_id], map: "pages_folder_id_fkey")
  @@index([user_id], map: "pages_user_id_fkey")
}

model users {
  id            Int           @id @default(autoincrement())
  name          String?       @db.VarChar(255)
  email         String?       @unique(map: "email") @db.VarChar(255)
  password      String?       @db.VarChar(255)
  provider_id   String?       @db.VarChar(255)
  provider_type String?       @db.VarChar(255)
  status        users_status? @default(active)
  created_at    DateTime      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?     @db.Timestamp(0)
  bookmarks     bookmarks[]
  folders       folders[]
  pages         pages[]
}

enum users_status {
  active
  banned
}
